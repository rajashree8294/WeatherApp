---
## Create GKE cluster

- name: create a network
  gcp_compute_network:
    name: "{{ network_name }}"
    auto_create_subnetworks: 'false'
    project: "{{ project_name }}"
    auth_kind: "{{ auth_kind }}"
    service_account_file: "{{ service_account_file }}"
    state: present
  register: network

- name: create a subnetwork
  gcp_compute_subnetwork:
    name: "{{ subnetwork_name }}"
    region: "{{ region_name }}"
    network: "{{ network }}"
    ip_cidr_range: "{{ subnet_ip_cidr_range }}"
    project: "{{ project_name }}"
    auth_kind: "{{ auth_kind }}"
    service_account_file: "{{ service_account_file }}"
    state: present
  register: subnetwork

- name: create a firewall
  gcp_compute_firewall:
    name: "{{ network_firewall_name }}"
    network: "{{ network }}"
    allowed:
    - ip_protocol: icmp
    - ip_protocol: tcp
      ports: ["22", "80", "8080", "1000-2000", "3389", "3306", "443", "3000"]
    # target_tags:
    # - test-ssh-server
    # - staging-ssh-server
    # source_tags:
    # - webapp
    source_ranges: ["0.0.0.0/0"]
    project: "{{ project_name }}"
    auth_kind: "{{ auth_kind }}"
    service_account_file: "{{ service_account_file }}"
    state: present

- name: Allocating an IP address range
  shell:
    cmd: |
      cat <<EOF | gcloud compute addresses create google-managed-services-"{{ network_name }}" \
          --global \
          --purpose=VPC_PEERING \
          --prefix-length=16 \
          --network="{{ network_name }}" \
          --project="{{ project_name }}"
          EOF
  register: ip_allocation
  ignore_errors: yes

- name: Creating private connection
  shell:
    cmd: |
      cat <<EOF | gcloud services vpc-peerings connect \
          --service=servicenetworking.googleapis.com \
          --ranges=google-managed-services-"{{ network_name }}" \
          --network="{{ network_name }}" \
          --project="{{ project_name }}"
          EOF
  register: private_connection
  ignore_errors: yes


# - name: Create Network peering with default network
#   shell:
#     cmd: |
#       cat <<EOF | gcloud compute networks peerings create default-"{{ network_name }}"-peering \
#           --auto-create-routes \
#           --network="{{ network_name }}" \
#           --peer-project="{{ project_name }}" \
#           --peer-network=default \
#           --import-custom-routes \
#           --export-custom-routes
#           EOF
#   register: network_peering
  # ignore_errors: yes

# - name: Create Network peering with gke cluster network
#   shell:
#     cmd: |
#       cat <<EOF | gcloud compute networks peerings create "{{ network_name }}"-default-peering \
#           --auto-create-routes \
#           --network=default \
#           --peer-project="{{ project_name }}" \
#           --peer-network="{{ network_name }}" \
#           --import-custom-routes \
#           --export-custom-routes
#           EOF
#   register: network_peering2

- name: create a cluster
  google.cloud.gcp_container_cluster:
    name: "{{ cluster_name }}"
    initial_node_count: "{{ initial_node_count }}"
    master_auth:
      # username: "{{ username }}"
      # password: "{{ password }}"
      username: ""
      password: ""
      client_certificate_config:
        issue_client_certificate: no
    node_config:
      machine_type: "{{ machine_type }}"
      disk_size_gb: "{{ disk_size_gb }}"
      preemptible: yes
    ip_allocation_policy:
      use_ip_aliases: true
    private_cluster_config:
      enable_private_endpoint: false
      enable_private_nodes: true
      master_ipv4_cidr_block: "{{ master_ip_cidr_range }}"
    master_authorized_networks_config:
      enabled: true
      cidr_blocks:
      - cidr_block: '0.0.0.0/0'
    addons_config:
      horizontal_pod_autoscaling: 
        disabled: false
      http_load_balancing:
        disabled: false
    location: "{{ region_name }}"
    network: "{{ network.name }}"
    subnetwork: "{{ subnetwork.name }}"
    project: "{{ project_name }}"
    auth_kind: "{{ auth_kind }}"
    service_account_file: "{{ service_account_file }}"
    scopes:
      - https://www.googleapis.com/auth/cloud-platform
      - https://www.googleapis.com/auth/compute
      - https://www.googleapis.com/auth/devstorage.read_only
      - https://www.googleapis.com/auth/logging.write
      - https://www.googleapis.com/auth/monitoring
      - https://www.googleapis.com/auth/servicecontrol
      - https://www.googleapis.com/auth/service.management.readonly
      - https://www.googleapis.com/auth/trace.append
    state: present
  register: cluster

- name: create a node pool
  gcp_container_node_pool:
    name: "{{ npname }}"
    initial_node_count: "{{ np_initial_node_count }}"
    cluster: "{{ cluster }}"
    location: "{{ region_name }}"
    project: "{{ project_name }}"
    config:
      disk_size_gb: "{{ disk_size_gb }}"
      machine_type: "{{ machine_type }}"
      preemptible: yes
    autoscaling:
      enabled: yes
      min_node_count: "{{ min_nodes }}"
      max_node_count: "{{ max_nodes }}"
    auth_kind: "{{ auth_kind }}"
    service_account_file: "{{ service_account_file }}"
    scopes:
      - https://www.googleapis.com/auth/cloud-platform
    state: present
  register: node_pool

- name: Set kubectl context
  shell: "gcloud container clusters get-credentials {{ cluster_name }} --region {{ region_name }}"

- name: Create NAT Router
  shell: "gcloud compute routers create nat-router --network {{ network_name }} --region {{ region_name }}"
  ignore_errors: yes

- name: Add config to NAT Router
  shell:
    cmd: |
      cat <<EOF | gcloud compute routers nats create nat-config \
          --router-region "{{ region_name }}" \
          --router nat-router \
          --nat-all-subnet-ip-ranges \
          --auto-allocate-nat-external-ips
          EOF
  # register: nat_router_config
  ignore_errors: yes

- name: create a disk
  google.cloud.gcp_compute_disk:
    name: "{{ disk_name }}"
    size_gb: "{{ disk_size_gb }}"
    source_image: "{{ disk_source_image }}"
    zone: "{{ region_name }}-b"
    project: "{{ project_name }}"
    auth_kind: "{{ auth_kind }}"
    service_account_file: "{{ service_account_file }}"
    state: present
  register: bastion_disk

- name: create an address for bastion instance
  google.cloud.gcp_compute_address:
    name: "{{ address_name }}"
    region: "{{ region_name }}"
    project: "{{ project_name }}"
    auth_kind: "{{ auth_kind }}"
    service_account_file: "{{ service_account_file }}"
    state: present
  register: bastion_address

- name: create bastion host
  google.cloud.gcp_compute_instance:
    name: "{{ instance_name }}"
    machine_type: n1-standard-1
    disks:
    - auto_delete: 'true'
      boot: 'true'
      source: "{{ bastion_disk }}"
    - auto_delete: 'true'
      interface: NVME
      type: SCRATCH
      initialize_params:
        disk_type: local-ssd
    labels:
      environment: production
    network_interfaces:
    - network: "{{ network }}"
      access_configs:
      - name: External NAT
        nat_ip: "{{ bastion_address }}"
        type: ONE_TO_ONE_NAT
      subnetwork: "{{ subnetwork }}"
    zone: "{{ region_name }}-b"
    project: "{{ project_name }}"
    auth_kind: "{{ auth_kind }}"
    service_account_file: "{{ service_account_file }}"
    state: present
  register: bastion_instance

- name: Wait for ssh to come up
  wait_for: host="{{ bastion_address.address }}" port=22 delay=10 timeout=300

# To make sure we give enough time for instance to be ready  
- pause:
    seconds: 30

- name: Add SSH key to bastion host
  shell: "gcloud compute instances add-metadata {{ instance_name }} --zone={{ region_name }}-b --metadata-from-file ssh-keys={{ ssh_key_txt_path }}"

# gcloud beta resources are not available in gcp_sql_instance module yet so need to use gcloud sdk.
- name: Create SQL instance webapp 
  shell:
    cmd: |
      cat <<EOF | gcloud --project="{{ project_name }}" beta sql instances create "{{ db_identifier }}" \
          --database-version=MYSQL_5_7 \
          --tier="{{ sql_instance_tier }}" \
          --region="{{ region_name }}" \
          --root-password="{{ db_password }}" \
          --network="{{ network_name }}" \
          --no-assign-ip \
          --async \
          --no-backup
          EOF
  # register: sql_instance
  ignore_errors: yes

- name: Create SQL instance poller 
  shell:
    cmd: |
      cat <<EOF | gcloud --project="{{ project_name }}" beta sql instances create "{{ poller_db_identifier }}" \
          --database-version=MYSQL_5_7 \
          --tier="{{ sql_instance_tier }}" \
          --region="{{ region_name }}" \
          --root-password="{{ db_password }}" \
          --network="{{ network_name }}" \
          --no-assign-ip \
          --async \
          --no-backup
          EOF
  # register: sql_instance
  ignore_errors: yes

# we will not keep creation of this instance async 
# so by the time below instance is created both previous instances are ready
- name: Create SQL instance notifier 
  shell:
    cmd: |
      cat <<EOF | gcloud --project="{{ project_name }}" beta sql instances create "{{ notifier_db_identifier }}" \
          --database-version=MYSQL_5_7 \
          --tier="{{ sql_instance_tier }}" \
          --region="{{ region_name }}" \
          --root-password="{{ db_password }}" \
          --network="{{ network_name }}" \
          --no-assign-ip \
          --no-backup
          EOF
  # register: sql_instance
  ignore_errors: yes

# to make sure webapp and poller instances are ready
- pause:
    seconds: 60

- name: create database webapp
  gcp_sql_database:
    name: "{{ db_name }}"
    charset: utf8
    instance: "{{ db_identifier }}"
    project: "{{ project_name }}"
    auth_kind: "{{ auth_kind }}"
    service_account_file: "{{ service_account_file }}"
    state: present
  register: sql_database

- name: get info on webapp db instance
  gcp_sql_instance_info:
    project: "{{ project_name }}"
    auth_kind: "{{ auth_kind }}"
    service_account_file: "{{ service_account_file }}"
  register: sql_instance_info

# - debug:
#     var: sql_instance_info.resources

- set_fact: sql_instance_dict="{{ (sql_instance_info.resources | selectattr('name', 'defined') | selectattr('name', 'equalto', db_identifier) | list) [0] }}"

# - debug: msg="sql_instance_dict:{{ sql_instance_dict }}"

- name: create an sql user on webapp db instance
  gcp_sql_user:
    name: "{{ db_username }}"
    host: ""
    password: "{{ db_password }}"
    instance: "{{ sql_instance_dict }}"
    project: "{{ project_name }}"
    auth_kind: "{{ auth_kind }}"
    service_account_file: "{{ service_account_file }}"
    state: present
  register: sql_user

# Poller db and user
- name: create database poller
  gcp_sql_database:
    name: "{{ poller_db_name }}"
    charset: utf8
    instance: "{{ poller_db_identifier }}"
    project: "{{ project_name }}"
    auth_kind: "{{ auth_kind }}"
    service_account_file: "{{ service_account_file }}"
    state: present
  register: sql_database_poller

# - debug:
#     var: sql_instance_dict_poller.resources

- set_fact: sql_instance_dict_poller="{{ (sql_instance_info.resources | selectattr('name', 'defined') | selectattr('name', 'equalto', poller_db_identifier) | list) [0] }}"

# - debug: msg="sql_instance_dict_poller:{{ sql_instance_dict_poller }}"

- name: create an sql user on poller db instance
  gcp_sql_user:
    name: "{{ db_username }}"
    host: ""
    password: "{{ db_password }}"
    instance: "{{ sql_instance_dict_poller }}"
    project: "{{ project_name }}"
    auth_kind: "{{ auth_kind }}"
    service_account_file: "{{ service_account_file }}"
    state: present
  register: sql_user_poller


# Notifier db and user
- name: create database notifier
  gcp_sql_database:
    name: "{{ notifier_db_name }}"
    charset: utf8
    instance: "{{ notifier_db_identifier }}"
    project: "{{ project_name }}"
    auth_kind: "{{ auth_kind }}"
    service_account_file: "{{ service_account_file }}"
    state: present
  register: sql_database_notifier

# - debug:
#     var: sql_instance_dict_poller.resources

- set_fact: sql_instance_dict_notifier="{{ (sql_instance_info.resources | selectattr('name', 'defined') | selectattr('name', 'equalto', notifier_db_identifier) | list) [0] }}"

# - debug: msg="sql_instance_dict_poller:{{ sql_instance_dict_poller }}"

- name: create an sql user on notifier db instance
  gcp_sql_user:
    name: "{{ db_username }}"
    host: ""
    password: "{{ db_password }}"
    instance: "{{ sql_instance_dict_notifier }}"
    project: "{{ project_name }}"
    auth_kind: "{{ auth_kind }}"
    service_account_file: "{{ service_account_file }}"
    state: present
  register: sql_user_notifier
