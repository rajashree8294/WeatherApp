---
- name: Add helm charts stable repo
  shell: "helm repo add stable https://charts.helm.sh/stable"
  ignore_errors: yes

- name: Update helm repos
  shell: "helm repo update"
  ignore_errors: yes

- name: Install nginx-ingress from stable helm repo (this is deprecated but still works)
  shell: "helm upgrade --install nginx-ingress stable/nginx-ingress --set controller.publishService.enabled=true"

- name: Wait for nginx-ingress pod to be ready
  shell: "kubectl wait --for=condition=Ready pod -l app=nginx-ingress --timeout=180s"
  
- pause:
    seconds: 30

- name: Get application loadBalancer URL
  shell: "kubectl get svc nginx-ingress-controller -o json | jq -r .status.loadBalancer.ingress[0].ip"
  register: nginx_ip

- debug:
    var: nginx_ip

- name: get info on a managed zone
  gcp_dns_managed_zone_info:
    dns_name: "{{ dns_zone }}."
    project: "{{ project_name }}"
    auth_kind: "{{ auth_kind }}"
    service_account_file: "{{ service_account_file }}"
  register: managed_zone

- name: create a resource record set
  gcp_dns_resource_record_set:
    name: "{{ sub_domain_name }}.{{ dns_zone }}."
    managed_zone: "{{ managed_zone.resources[0] }}"
    type: A
    ttl: 60
    target:
    - "{{ nginx_ip.stdout }}"
    project: "{{ project_name }}"
    auth_kind: "{{ auth_kind }}"
    service_account_file: "{{ service_account_file }}"
    state: present

- pause:
    seconds: 5

- name: Apply nginx ingress for webapp without ssl
  shell:
    cmd: |
      cat <<EOF | kubectl apply -f -
      apiVersion: networking.k8s.io/v1beta1
      kind: Ingress
      metadata:
        name: webapp-kubernetes-ingress
        annotations:
          kubernetes.io/ingress.class: nginx
      spec:
        rules:
        - host: "{{ sub_domain_name }}.{{ dns_zone }}"
          http:
            paths:
            - backend:
                serviceName: webapp-service
                servicePort: 80
      EOF

- pause:
    seconds: 5

- name: Install cert manager CRDs
  shell: "kubectl apply --validate=false -f https://github.com/jetstack/cert-manager/releases/download/v1.0.4/cert-manager.crds.yaml"

- name: Create new namespace for cert manager
  shell: "kubectl create namespace cert-manager"
  ignore_errors: yes

- name: Add jetstack helm repo
  shell: "helm repo add jetstack https://charts.jetstack.io"

- name: Install cert manager helm chart
  shell: "helm upgrade --install cert-manager --version v1.0.4 --namespace cert-manager jetstack/cert-manager"

- pause:
    seconds: 30

- name: Apply cerificate
  shell:
    cmd: |
      cat <<EOF | kubectl apply -f -
      apiVersion: cert-manager.io/v1alpha2
      kind: ClusterIssuer
      metadata:
        name: letsencrypt-prod
      spec:
        acme:
          # Email address used for ACME registration
          email: "{{ email }}"
          server: https://acme-v02.api.letsencrypt.org/directory
          privateKeySecretRef:
            # Name of a secret used to store the ACME account private key
            name: letsencrypt-prod-private-key
          # Add a single challenge solver, HTTP01 using nginx
          solvers:
          - http01:
              ingress:
                class: nginx
      EOF

- pause:
    seconds: 5

- name: Apply nginx ingress for webapp with ssl
  shell:
    cmd: |
      cat <<EOF | kubectl apply -f -
      apiVersion: networking.k8s.io/v1beta1
      kind: Ingress
      metadata:
        name: webapp-kubernetes-ingress
        annotations:
          kubernetes.io/ingress.class: nginx
          cert-manager.io/cluster-issuer: letsencrypt-prod
      spec:
        tls:
        - hosts:
          - "{{ sub_domain_name }}.{{ dns_zone }}"
          secretName: webapp-kubernetes-tls
        rules:
        - host: "{{ sub_domain_name }}.{{ dns_zone }}"
          http:
            paths:
            - backend:
                serviceName: webapp-service
                servicePort: 80
      EOF
