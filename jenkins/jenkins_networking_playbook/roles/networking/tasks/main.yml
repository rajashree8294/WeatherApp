---
- name: Create vpc for Jenkins
  ec2_vpc_net:
    name: "{{ vpc_name }}"
    profile: "{{ aws_root }}"
    cidr_block: "{{ vpc_cidr }}"
    region: "{{ aws_region }}"
    state: present
    tags:
      Name: "{{ vpc_name }}"
    tenancy: default
    dns_hostnames: yes
    dns_support: yes
    multi_ok: no
  register: jenkins_vpc

- name: Create Internet Gateway
  ec2_vpc_igw:
    state: present
    region: "{{ aws_region }}"
    profile: "{{ aws_root }}"
    vpc_id: "{{ jenkins_vpc.vpc.id }}"
    tags:
      Name: "jenkins-igw"
  register: jenkins_igw

- name: Create subnets
  ec2_vpc_subnet:
    state: present
    region: "{{ aws_region }}"
    profile: "{{ aws_root }}"
    az: "{{ item.value.az }}"
    vpc_id: "{{ jenkins_vpc.vpc.id }}"
    cidr: "{{ item.value.cidr }}"
    tags:
      Name: "jenkins_{{ item.value.az }}"
  with_dict: "{{ vpc_subnets }}"
  register: jenkins_vpc_subnets

- name: Grab the route tables
  ec2_vpc_route_table_facts:
    profile: "{{ aws_root }}"
    region: "{{ aws_region }}"
    filters:
      vpc-id: "{{ jenkins_vpc.vpc.id }}"
  register: jenkins_route_table

- name: Update the route table in the vpc
  ec2_vpc_route_table:
    state: present
    lookup: id
    route_table_id: "{{ jenkins_route_table.route_tables[0].id }}"
    vpc_id: "{{ jenkins_vpc.vpc.id}}"
    profile: "{{ aws_root }}"
    region: "{{ aws_region }}"
    tags:
      Name: "jenkins_route_table_{{ jenkins_vpc.vpc.id }}"
    subnets:
        - "{{ jenkins_vpc_subnets.results[0].subnet.id }}"
        - "{{ jenkins_vpc_subnets.results[1].subnet.id }}"
    routes:
      - dest: 0.0.0.0/0
        gateway_id: "{{ jenkins_igw.gateway_id }}"
  register: jenkins_route_table_updated

- name: Create vpc security groups
  ec2_group:
    state: present
    profile: "{{ aws_root }}"
    region: "{{ aws_region }}"
    vpc_id: "{{ jenkins_vpc.vpc.id }}"
    name: "jenkins_sg_{{ jenkins_vpc.vpc.id }}"
    description: "jenkins security group for {{ jenkins_vpc.vpc.id }}"
    rules:
      - proto: tcp
        from_port: 22
        to_port: 22
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        from_port: 80
        to_port: 80
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        from_port: 443
        to_port: 443
        cidr_ip: 0.0.0.0/0
    tags:
      Name: "jenkins_sg"
  register: jenkins_sg

- name: Check for already running EC2 instances
  ec2_instance_info:
    region: "{{ aws_region }}"
    profile: "{{ aws_root }}"
    filters:
      "tag:Name": "jenkins-instance"
      instance-state-name: [ "running" ]
  register: existing_ec2

- name: Create EC2 Instace
  ec2:
    state: present
    tenancy: default
    key_name: "{{ key_name }}"
    profile: "{{ aws_root }}"
    region: "{{ aws_region }}"
    instance_type: "{{ ec2_instance_type }}"
    image: "{{ ami }}"
    wait: yes
    count: 1
    group_id: "{{ jenkins_sg.group_id }}"
    vpc_subnet_id: "{{ jenkins_vpc_subnets.results[0].subnet.id }}"
    assign_public_ip: yes
    instance_tags:
      App: "jenkins"
      Name: "jenkins-instance"
  when: existing_ec2.instances | length == 0
  register: ec2

- name: Associate an elastic IP with an instance
  ec2_eip:
    device_id: "{{ ec2.instance_ids[0] }}"
    ip: "{{ eip }}"
    profile: "{{ aws_root }}"
    region: "{{ aws_region }}"
  when: ec2
  ignore_errors: true

- name: Update subdomain with Elastic IP
  route53:
    state: present
    zone: "{{  hosted_zone }}"
    record: "{{ sub_domain_name }}"
    type: A
    ttl: 60
    value: "{{ eip }}"
    wait: yes
    profile: "{{ aws_root }}"
    overwrite: yes


- name: Add instance public IP to host group
  add_host: hostname={{ eip }} groups=ec2hosts

- name: Remove ip from known_hosts
  command: "ssh-keygen -f \"~/.ssh/known_hosts\" -R \"{{ eip }}\""
  ignore_errors: true

- name: Wait for ssh to come up
  wait_for: host="{{ eip }}" port=22 delay=10 timeout=300

- name: Write the new ec2 instance host key to known hosts
  connection: local
  shell: "ssh-keyscan -H {{ eip }} >> ~/.ssh/known_hosts"
